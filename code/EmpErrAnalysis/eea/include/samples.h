
#ifndef __SAMPLESH_ 
#define __SAMPLESH_ 

#include <ostream>

#include <vector>
#include <DataMat.h>


struct Point2D
{
  Point2D(float x0=0, float y0=0) :x(x0), y(y0)
  { }

  Point2D(float x0, float y0, bool toroidal):x(x0), y(y0)
  {
    if (toroidal)
    {
      x = x0 - floor(x0) ;
      y = y0 - floor(y0) ;
    }
  }
  
  float x, y;
};

class samples ;

struct Params
{
    double sigma ;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class sampler
{
    public:
	sampler() ;

	static samples* Generate(const string& type, int n,  const Params& param) ;
	static map<string, samples*> exemplars;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class samples
{
    public:
	virtual samples* GenSamples(int n, const Params& param) = 0 ;
	virtual void PSpectrum(int Resln, DataMat& P) const {}
	virtual void WriteEPSFile(const string& fname) ;
	virtual ~samples() ;
	
	virtual string GetType() const {return SamplingType; } 
	friend ostream& operator << (ostream& os, samples& s) ;
	
    protected:
	vector<Point2D> p ;
	string SamplingType ;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


// 				Subclasses of samples 
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class randomSamples: public samples
{
    public:
	virtual samples* GenSamples(int n,  const Params& param)  ;
	virtual ~randomSamples() {}
	
    private:
	randomSamples() {SamplingType = "Random" ;}
	randomSamples(int n,  const Params& param) ;
	friend class sampler;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class gridSamples: public samples
{
    public:
	virtual samples* GenSamples(int n,  const Params& param)  ;
	virtual ~gridSamples() {}
	
    private:
	gridSamples() {SamplingType = "Grid" ;}
	gridSamples(int n,  const Params& param) ;
	friend class sampler;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class jitteredSamples: public samples
{
    public:
	virtual samples* GenSamples(int n,  const Params& param)  ;
	virtual ~jitteredSamples() {}
	
    private:
	jitteredSamples() {SamplingType = "Jittered" ;}
	jitteredSamples(int n,  const Params& param) ;
	friend class sampler;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class gjSamples: public samples
{
    public:
	virtual samples* GenSamples(int n,  const Params& param)  ;
	virtual ~gjSamples() {}
	
    private:
	gjSamples() {SamplingType = "GJittered" ;}
	gjSamples(int n,  const Params& param) ;
	friend class sampler;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class pdSamples: public samples
{
    public:
	virtual samples* GenSamples(int n,  const Params& param)  ;
	virtual ~pdSamples() {}
	
    private:
	pdSamples() {SamplingType = "PDisk" ;}
	pdSamples(int n,  const Params& param) {} ;
	friend class sampler;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class bjSamples: public samples
{
    public:
	virtual samples* GenSamples(int n,  const Params& param)  ;
	virtual ~bjSamples() {}
	
    private:
	bjSamples() {SamplingType = "BJittered" ;}
	bjSamples(int n,  const Params& param) ;
	friend class sampler;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


#endif // __SAMPLESH_ 